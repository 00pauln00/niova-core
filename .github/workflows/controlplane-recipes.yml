name: holon_controlplane_app_recipes_workflow
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - uses: actions/checkout@v2
      with:
        path: ./code

    - name: apt update
      run: sudo apt update

    # Install golang
    - name: Install golang 1.18.3
      run: sudo rm -rf /usr/bin/go &&
           sudo wget https://golang.org/dl/go1.18.3.linux-amd64.tar.gz &&
           sudo mkdir /home/runner/work/go &&
           sudo tar -C /home/runner/work/go -xzf  go1.18.3.linux-amd64.tar.gz &&
           export PATH=$PATH:/home/runner/work/go/go/bin &&
           go version

    - name: dpkg / rpm prep
      run: sudo apt-get install -y uuid-dev
                                   uuid libuuid1
                                   libaio-dev libaio1
                                   libgcrypt20 openssl
                                   libssl-dev python3-pip
                                   python3-setuptools `apt-cache search librocksdb | awk '{print $1}'` uncrustify libasan5 libtsan0

    # Install python libraies
    - name: Install python libraries
      run:  pip3 install setuptools wheel func_timeout sockets psutil dpath jmespath

    # Install Ansible
    - name: Install Ansible
      run:  pip3 install ansible

    - name: make
      run: cd ./code &&
           ./prepare.sh &&
           ./configure --prefix=/home/runner/work/niovad/niovad/build_dir/ --enable-devel &&
           make clean && make && make install
      env:
        LD_LIBRARY_PATH: /home/runner/work/niovad/niovad/build_dir/lib

    - name: Build go applications using makefile
      run: export PATH=$PATH:/home/runner/work/go/go/bin &&
           cd code/go/controlPlane
           && cd ncpc/ && go mod tidy && cd ..
           && cd pmdbServer && go mod tidy && cd ..
           && cd proxy && go mod tidy && cd ..
           && make install_only -e DIR=/home/runner/work/niovad/niovad/build_dir

    - name: Copy script to run recipes
      run: cp ./code/scripts/run-recipes.sh /home/runner/work/niovad/niovad/build_dir/ &&
           cp ./code/scripts/control_plane_recipes.txt /home/runner/work/niovad/niovad/build_dir/

    # Checkout holon repo
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
       repository: 00pauln00/holon
       ref: prometheus_support
       token: ${{ secrets.HOLON_NIOVA_CI_21_12_2020 }} # 'GitHub_PAT' is a secret that contains your PAT
       path: ./holon


    #Build nisd monitor
    - name: Build nisd lookout monitor
      run:  export PATH=$PATH:/home/runner/work/go/go/bin &&
            cd code/go/lookout/nisdMonitor && 
            make install_all -e DIR=/home/runner/work/niovad/niovad/build_dir
            && cp nisdLookout /home/runner/work/niovad/niovad/build_dir/libexec/niova

    # Checkout niova-lookout / Branch : nisd_communication
    #- name: Checkout niova-lookout repository
    #  uses: actions/checkout@v2
    #  with:
    #   repository: 00pauln00/niova-lookout
    #   ref: nisd_communication
    #   token: ${{ secrets.HOLON_NIOVA_CI_21_12_2020 }} # 'GitHub_PAT' is a secret that contains your PAT
    #   path: ./lookout

    #- name: Compile niova-lookout
    #run: export PATH=$PATH:/home/runner/work/go/go/bin &&
    # cd ./lookout && go build && cp lookout /home/runner/work/niovad/niovad/build_dir/libexec/niova && cd -

    # Checkout niova-block repository / Branch : nisd_mointor_retry
    - name: Checkout niova-block repository
      uses: actions/checkout@v2
      with:
       repository: 00pauln00/niova-block
       ref: nisd_mointor_retry
       token: ${{ secrets.HOLON_NIOVA_CI_21_12_2020 }} # 'GitHub_PAT' is a secret that contains your PATH
       submodules: recursive
       path: ./niova-block

    # niova-block submodule init
    - name: submodule init (niova-block)
      run: cd ./niova-block && git submodule init && git submodule update

    # build liburing
    - name: liburing build
      run: cd ./niova-block/modules/liburing &&
           ./configure && make && sudo make install

    - name: Compile niova-block
      run: cd ./niova-block &&
           ./prepare.sh &&
           ./configure --with-niova=/home/runner/work/niovad/niovad/build_dir  --prefix=/home/runner/work/niovad/niovad/build_dir                                        --enable-devel &&  make clean && make && make install
      env:
        LD_LIBRARY_PATH: /home/runner/work/niovad/niovad/build_dir/lib

    - name: copy binaries of niova block to /home/runner/work/niovad/niovad/build_dir
      run: cp -r /home/runner/work/niovad/niovad/build_dir/bin/niova-block-ctl /home/runner/work/niovad/niovad/build_dir/bin/nisd                           /home/runner/work/niovad/niovad/build_dir/libexec/niova

    - name: copy niova-block-test binaries
      run: cp ./niova-block/test/niova-block-test   /home/runner/work/niovad/niovad/build_dir/libexec/niova

    - name: List build directory of binaries
      run: ls -l /home/runner/work/niovad/niovad/build_dir/libexec/niova

    - name: Copy holon repo
      run: cp -r ./holon /home/runner/work/niovad/niovad/build_dir/

    - name: Create log directory for storing holon logs
      run: mkdir  /home/runner/work/niovad/niovad/holon_log

    - name: List build directory
      run: ls -l /home/runner/work/niovad/niovad/build_dir

    - name:  run recipes for controlplane application
      run: cd /home/runner/work/niovad/niovad/build_dir/holon/ &&
           ../run-recipes.sh '/home/runner/work/niovad/niovad/build_dir/holon'
                             '/home/runner/work/niovad/niovad/build_dir'
                             '/home/runner/work/niovad/niovad/holon_log' 5
                             '/home/runner/work/niovad/niovad/build_dir/control_plane_recipes.txt'
                             'controlplane'
                             '0'
                             '/home/runner/work/go/go/bin'

    - name: Prepare artifact filename
      id: prepare_artifact_filename
      run: |
        echo ::set-output name=ARTIFACT_NAME::test-recipe-report."$( echo $(($RANDOM%10000)))"
      if: failure()

    - name: Archive the test results
      uses: actions/upload-artifact@v2
      with:
         name: ${{ steps.prepare_artifact_filename.outputs.ARTIFACT_NAME }}
         path: /home/runner/work/niovad/niovad/holon_log
      if: failure()
